
          prune_kubeadm_env()
          {
            [[ -z "$1" ]] && \
              {
                echo >&2 "prune_kubeadm_env(): caller failed to pass required argument"
                return 10
              }

            local what_to_prune=$1

            # remove this from the current env file.
            sudo sed -r -i 's#(KUBELET_KUBEADM_ARGS="?.*)'"${what_to_prune}"'(.*"?)#\1\2#' /var/lib/kubelet/kubeadm-flags.env
          }

          centos_install_reqs()
          {
            # need curl and jq
            sudo yum -y install epel-release && sudo yum -y install jq curl
          }

          install_docker()
          {
            local docker_service

            docker_service='/usr/lib/systemd/system/docker.service'

            # install and configure docker
            if ! which docker 2>/dev/null; then
              sudo yum install -y docker

              if ! docker version >/dev/null 2>&1; then
                return 50
              fi
            else
              echo >&2 "Skipping installation of docker. Already installed."
            fi

            # enable insecure image registry
            sudo cp /dev/stdin /etc/docker/daemon.json  <<< '
            {
                "insecure-registries": [
                    "docker",
                    "docker.io",
                    "registry-1.docker.io",
                    "gcr.io",
                    "k8s.gcr.io",
                    "quay.io",
                    "182.195.81.113:9401",
                    "182.195.81.113:9402",
                    "182.195.81.113:9403",
                    "182.195.81.113:9404"
                ]
            }
            '

            if [[ ! -f "$docker_service" ]]; then
              echo >&2 'Cannot update docker.service file. "$docker_service" does not exist.'
              return 16
            fi

            if [[ $(grep -c "native.cgroupdriver=systemd" "$docker_service" 2>/dev/null) == 0 ]]; then
              if ! sudo sed -r -i 's#^(ExecStart=/usr/bin/dockerd)#\1 --exec-opt native.cgroupdriver=systemd#' \
                   "$docker_service"; then
                echo >&2 "Unable to update '$docker_service' with proper cgroupdriver."
                return 19
              fi
            else
              echo >&2 "WARNING: Looks like '$docker_service' was already updated. Skipping."
            fi

            if sudo cp /dev/stdin /etc/sysconfig/docker <<< 'DOCKER_OPTS="--iptables=false --ip-masq=false"'; then

              [[ -z ${USER+x} ]] && USER=$(whoami)
              sudo usermod -a -G docker $USER
              sudo chmod 640 /etc/sysconfig/docker
              newgrp

              if sudo systemctl enable --now docker;then
                if ! sudo systemctl daemon-reload; then
                  echo >&2 "Unable to reload systemctl daemon."
                  return 51
                else
                  sudo systemctl restart docker.service
                fi
              else
                return 51
              fi
            else
              return 52
            fi
          }

          install_k8s_by_yum()
          {
            [[ -z ${KUBELET_VERSION} ]] && \
              {
                echo >&2 'Usage: install_k8s(): caller must pass $KUBELET_VERSION.'
                return 60
              }

            sudo cp /dev/stdin /etc/yum.repos.d/kubernetes.repo <<< '
            [kubernetes]
            name=Kubernetes
            baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
            enabled=1
            gpgcheck=1
            repo_gpgcheck=1
            gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
            exclude=kube*' && \

            sudo sed -r -i 's#^\ +##g' /etc/yum.repos.d/kubernetes.repo

            # Set SELinux in permissive mode (effectively disabling it)
            sudo setenforce 0
            sudo sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config

            sudo yum install -y "kubelet-${KUBELET_VERSION}" \
                                "kubeadm-${KUBELET_VERSION}" \
                                "kubectl-${KUBELET_VERSION}" \
                                conntrack --disableexcludes=kubernetes

            # See https://samsung-cnct.atlassian.net/browse/CMS-391
            # If the file exists, grok it first (preserving current settings)
            if [[ -f /var/lib/kubelet/kubeadm-flags.env ]]; then
              source /var/lib/kubelet/kubeadm-flags.env

              # prune arg we want to change
              [[ -n "${KUBELET_KUBEADM_ARGS}" ]] && prune_kubeadm_env "--cgroup-driver"

              # change the one we want to change
              echo "KUBELET_KUBEADM_ARGS=$KUBELET_KUBEADM_ARGS --cgroup-driver=systemd" >> /var/lib/kubelet/kubeadm-flags.env
            fi

            sudo systemctl enable kubelet && sudo systemctl start kubelet
          }

          get_k8s_bin_version()
          {
            if [[ -n $1 ]]; then
              $1 version 2>/dev/null | grep -Po 'GitVersion:"v\d+\.\d+\.\d+"' | awk -F '"' '{print $2}'
            else
              return 99
            fi
          }

          # handles initial install, upgrade, and downgrades.
          install_k8s_by_curl()
          {
            local fail app_url suf p ptmp

            fail=0
            app_url="https://storage.googleapis.com/kubernetes-release/release/v${KUBELET_VERSION}/bin/linux/amd64/kube$suf"


            if [[ -z $KUBELET_VERSION ]]; then
              echo >&2 "FATAL: \$KUBELET_VERSION is nil! Cannot continue."
              return 31
            fi

            [[ ! -d /usr/local/bin ]] && sudo mkdir -p /usr/local/bin

            echo "KUBELET_VERSION to get to: $KUBELET_VERSION"

            for suf in ctl adm let; do
              p="/usr/local/bin/kube$suf"
              ptmp="$p-downloaded"

              if which kube$suf >/dev/null 2>&1; then
                echo "kube$suf is currently installed with version $(get_k8_sbin_version "kube$suf" || "unknown")"
              fi

              echo "Attempting to installing kube$suf v$KUBELET_VERSION as $p (using temporary file $ptmp first)..."

              if status=$(sudo curl -sL "$app_url" -o $p -w '{"status":"%{http_code}"}'); then
                if [[ "$(echo "$status" | jq -M -r '.status')" == 200 ]]; then

                  echo "  $status"

                  if ! sudo chmod 755 $ptmp; then
                    echo >&2 "Unable to chmod 755 $ptmp. Return code was $?."
                    return 101
                  fi

                  if $ptmp version >/dev/null 2>&1; then
                    echo >&2 "The downloaded file is not a proper k8s binary. Please investigate..."
                    return 102
                  fi

                  if mv $ptmp $p; then
                    echo "  done."
                  else
                    echo >&2 "Unable to mv $ptmp to $p. Return code for chmod was $?"
                    return 103
                  fi
                else
                  echo >&2 "FATAL: download of '$p' failed with $status"
                  ((fail++))
                fi
              else
                echo >&2 "Unable to download kube$suf using curl. HTTP status code was $(echo "$status" | jq -r -M '.status')."
                return 28
              fi
            done

            if [[ $fail -gt 0 ]]; then
              return 34
            fi
          }

          upgrade_master()
          {
            if install_k8s_by_curl; then
              sudo kubeadm upgrade node config --kubelet-version $(kubelet --version | cut -d ' ' -f 2) --kubeconfig /etc/kubernetes/admin.conf
              sudo systemctl restart kubelet
            fi
          }

          upgrade_node()
          {
            if install_k8s_by_curl; then
              sudo kubeadm upgrade node config --kubelet-version $(kubelet --version | cut -d ' ' -f 2)
              sudo systemctl restart kubelet
            fi
          }

          prips()
          {
            cidr=$1

            # range is bounded by network (-n) & broadcast (-b) addresses.
            # the following uses `read` with a here-statement to assign the output of
            # ipcalc -bn into two variables; $hi and $lo the output of which is cut and then
            # delimited by a ":". Read uses $IFS to automatically split on that delimiter.
            IFS=':' read -r hi lo <<< "$(ipcalc -bn "$cidr" | cut -f 2 -d = | sed -r 'N;s/\n/:/')"

            # similar to above only this is splitting on '.'.
            IFS='.' read -r a b c d <<< "$lo"
            IFS='.' read -r e f g h <<< "$hi"

            # kubeadm uses 10th IP as DNS server
            eval "echo {$a..$e}.{$b..$f}.{$c..$g}.{$d..$h}" | awk '{print $11}'
          }

          configure_kubelet()
          {
            # configure kubelet
            sudo cp /dev/stdin /etc/systemd/system/kubelet.service.d/20-kubelet.conf <<< "[Service]
          Environment='KUBELET_DNS_ARGS=--cluster-dns=${CLUSTER_DNS_SERVER} --cluster-domain=${CLUSTER_DNS_DOMAIN}'
            "
            sudo systemctl enable --now kubelet
          }

          configure_kubeadm()
          {
            sudo sysctl -w net.bridge.bridge-nf-call-iptables=1
            sudo sysctl -w net.bridge.bridge-nf-call-ip6tables=1
            sudo sysctl -p

            if [[ $(systemctl is-active firewalld.service) == "active" ]]; then
               sudo systemctl disable --now firewalld
            fi

            # configure kubeadm
            sudo cp /dev/stdin /etc/kubernetes/kubeadm_config.yaml <<< "---
            apiVersion: kubeadm.k8s.io/v1alpha1
            kind: MasterConfiguration
            api:
              advertiseAddress: ${MASTER_IP}
              bindPort: 443
            etcd:
              local:
                dataDir: /var/lib/etcd
                image:
            kubernetesVersion: v${CONTROL_PLANE_VERSION}
            token: ${TOKEN}
            kubeProxy:
              config:
                clusterCIDR: ${POD_CIDR}
            networking:
              dnsDomain: ${CLUSTER_DNS_DOMAIN}
              podSubnet: ${POD_CIDR}
              serviceSubnet: ${SERVICE_CIDR}
            "

            # YAML is whitespace picky. So, need to fix kubeadm_config
            sudo sed -r -i 's#^[[:blank:]]{2}##' /etc/kubernetes/kubeadm_config.yaml

            # Create and set bridge-nf-call-iptables to 1 to pass the kubeadm preflight check.
            # Workaround was found here:
            # http://zeeshanali.com/sysadmin/fixed-sysctl-cannot-stat-procsysnetbridgebridge-nf-call-iptables/
            if [[ $(sudo lsmod | grep br_netfilter -c) == 0 ]];then
              sudo modprobe br_netfilter
            fi

            # Allowing swap may not be reliable:
            # https://github.com/kubernetes/kubernetes/issues/53533
            sudo swapoff -a
          }

          run_kubeadm_master()
          {
            if ! sudo kubeadm init --config /etc/kubernetes/kubeadm_config.yaml; then
              echo >&2 "Unable to start kubeadm."
              return 95
            fi

            for (( i = 0; i < 60; i++ )); do
              sudo kubectl --kubeconfig /etc/kubernetes/kubelet.conf annotate --overwrite node "$(hostname)" machine="${MACHINE}" && break
              sleep 1
            done

            # By default, use flannel for container network plugin, should make this configurable.
            sudo kubectl --kubeconfig /etc/kubernetes/admin.conf apply -f https://raw.githubusercontent.com/coreos/flannel/v0.10.0/Documentation/kube-flannel.yml
          }

          run_kubeadm_join()
          {
            sudo kubeadm join --token "${TOKEN}" "${MASTER}" --ignore-preflight-errors=all --discovery-token-unsafe-skip-ca-verification
            for (( i = 0; i < 60; i++ )); do
                sudo kubectl --kubeconfig /etc/kubernetes/kubelet.conf annotate --overwrite node $(hostname) machine=${MACHINE} && break
                sleep 1
            done
          }

          drain()
          {
            sudo kubectl --kubeconfig=/etc/kubernetes/admin.conf drain $(hostname) --delete-local-data --ignore-daemonsets && \
            sudo kubectl --kubeconfig=/etc/kubernetes/admin.conf delete node $(hostname)
          }

          teardown()
          {
            sudo kubeadm reset

            sudo yum remove -y kubeadm kubectl kubelet kubernetes-cni docker

            RM_RF_DIRS="/etc/cni \
                        /etc/docker \
                        /etc/sysconfig/docker \
                        /etc/ethertypes \
                        /etc/kubernetes \
                        /etc/systemd/system/kubelet.service.d \
                        /var/lib/cni \
                        /var/lib/docker \
                        /var/lib/dockershim \
                        /var/lib/etcd \
                        /var/lib/etcd2 \
                        /var/lib/kubelet"

            for d in ${RM_RF_DIRS}; do
              sudo rm -rf $d
            done
          }

