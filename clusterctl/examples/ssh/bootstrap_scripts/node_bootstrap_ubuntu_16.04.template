          set -e
          set -x
          (
          # Run in noninteractive mode to avoid erroring when a config file preexists.
          export DEBIAN_FRONTEND=noninteractive

          sudo apt update
          sudo apt install -y apt-transport-https prips
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com --recv-keys F76221572C52609D
          cat << EOF | sudo tee /etc/apt/sources.list.d/k8s.list
          deb [arch=amd64] https://apt.dockerproject.org/repo ubuntu-xenial main
          EOF

          sudo apt update

          function install_configure_docker () {
              # prevent docker from auto-starting
              sudo sh -c "echo \"exit 101\" > /usr/sbin/policy-rc.d"
              sudo chmod +x /usr/sbin/policy-rc.d
              trap "sudo rm -f /usr/sbin/policy-rc.d" RETURN
              sudo apt install -y docker.io
              sudo sh -c "echo 'DOCKER_OPTS=\"--iptables=false --ip-masq=false\"' > /etc/default/docker"
              sudo systemctl daemon-reload
              sudo systemctl enable docker
              sudo systemctl start docker
          }

          install_configure_docker

          sudo sh -c "curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -"
          cat << EOF | sudo tee /etc/apt/sources.list.d/kubernetes.list
          deb http://apt.kubernetes.io/ kubernetes-xenial main
          EOF

          sudo apt update

          sudo mkdir -p /etc/kubernetes/
          # Our Debian packages have versions like "1.8.0-00" or "1.8.0-01". Do a prefix
          # search based on our SemVer to find the right (newest) package version.
          function getversion() {
              name=$1
              prefix=$2
              version=$(sudo apt-cache madison $name | awk '{ print $3 }' | grep ^$prefix | head -n1)
              if [[ -z "$version" ]]; then
                  echo Can\'t find package $name with prefix $prefix
                  exit 1
              fi
              echo $version
          }
          KUBELET=$(getversion kubelet ${KUBELET_VERSION}-)
          KUBEADM=$(getversion kubeadm ${KUBELET_VERSION}-)
          KUBECTL=$(getversion kubectl ${KUBELET_VERSION}-)
          sudo apt install -y kubelet=${KUBELET} kubeadm=${KUBEADM} kubectl=${KUBECTL}

          # kubeadm uses 10th IP as DNS server
          CLUSTER_DNS_SERVER=$(prips ${SERVICE_CIDR} | head -n 11 | tail -n 1)
          # Override network args to use kubenet instead of cni, override Kubelet DNS args and
          # add cloud provider args.
          cat << EOF | sudo tee /etc/systemd/system/kubelet.service.d/20-kubenet.conf
          [Service]
          Environment="KUBELET_DNS_ARGS=--cluster-dns=${CLUSTER_DNS_SERVER} --cluster-domain=${CLUSTER_DNS_DOMAIN}"
          EOF

          sudo systemctl daemon-reload
          sudo systemctl restart kubelet.service

           # [ERROR Swap]: running with swap on is not supported. Please disable swap
           # this was put in place since its something that must be done on ubuntu machines
           # when provisioning for use with kubeadm. Note, kubelet requires this to be off
           # and may be something we remove in the future and leave it as part of provisioning
          sudo swapoff -a
          sudo kubeadm join --token "${TOKEN}" "${MASTER}" --ignore-preflight-errors=all --discovery-token-unsafe-skip-ca-verification
          for tries in $(seq 1 60); do
              sudo kubectl --kubeconfig /etc/kubernetes/kubelet.conf annotate --overwrite node $(hostname) machine=${MACHINE} && break
              sleep 1
          done

          echo done.
          ) 2>&1 | sudo tee /var/log/startup.log
