          set -e
          set -x
          (
          ARCH=amd64

          # install and configure docker
          if ! docker version >/dev/null 2>&1; then
            sudo yum install -y docker
          else
            echo "Skipping installation of docker. Already installed."
          fi

          sudo cp /dev/stdin /etc/sysconfig/docker <<< 'DOCKER_OPTS="--iptables=false --ip-masq=false"'

          # enable insecure image registry
          sudo cp /dev/stdin /etc/docker/daemon.json  <<< '
          {
              "insecure-registries": [
                  "docker",
                  "docker.io",
                  "registry-1.docker.io",
                  "gcr.io",
                  "k8s.gcr.io",
                  "quay.io",
                  "182.195.81.113:9401",
                  "182.195.81.113:9402",
                  "182.195.81.113:9403",
                  "182.195.81.113:9404"
              ]
          }
          '

          # redirect public image repos to nexus (sds-cloud specific)
          sudo cp /dev/stdin /etc/hosts <<< '
          127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4
          ::1 localhost localhost.localdomain localhost6 localhost6.localdomain6

          182.195.81.113 quay.io gcr.io k8s.gcr.io registry-1.docker.io docker.io
          '

          sudo systemctl enable --now docker

          # install k8s tools
          sudo yum install -y kubelet-${KUBELET_VERSION}
          sudo yum install -y kubectl-${KUBELET_VERSION}
          sudo yum install -y kubeadm-${KUBELET_VERSION}

          function prips() {
            cidr=$1

            # range is bounded by network (-n) & broadcast (-b) addresses.
            lo=$(ipcalc -n $cidr | cut -f2 -d=)
            hi=$(ipcalc -b $cidr | cut -f2 -d=)

            IFS='.' read a b c d <<< "$lo"
            IFS='.' read e f g h <<< "$hi"

            eval "echo {$a..$e}.{$b..$f}.{$c..$g}.{$d..$h}"
          }

          # kubeadm uses 10th IP as DNS server
          export CLUSTER_DNS_SERVER=$(prips ${SERVICE_CIDR} | awk '{print $11}')

          # configure kubelet
          sudo cp /dev/stdin /etc/systemd/system/kubelet.service.d/20-kubenet.conf <<< '[Service]
          Environment="KUBELET_DNS_ARGS=--cluster-dns=${CLUSTER_DNS_SERVER} --cluster-domain=${CLUSTER_DNS_DOMAIN}"
          '
          sudo systemctl disable --now firewalld
          sudo systemctl enable --now kubelet

          # configure kubeadm
          sudo cp /dev/stdin /etc/kubernetes/kubeadm_config.yaml <<< "
          apiVersion: kubeadm.k8s.io/v1alpha1
          kind: MasterConfiguration
          api:
            advertiseAddress: ${MASTER_IP}
            bindPort: 443
          etcd:
            local:
              dataDir: /var/lib/etcd
              image:
          kubernetesVersion: v${CONTROL_PLANE_VERSION}
          token: ${TOKEN}
          kubeProxy:
            config:
              clusterCIDR: ${POD_CIDR}
          networking:
            dnsDomain: ${CLUSTER_DNS_DOMAIN}
            podSubnet: ${POD_CIDR}
            serviceSubnet: ${SERVICE_CIDR}
          "

          # Create and set bridge-nf-call-iptables to 1 to pass the kubeadm preflight check.
          # Workaround was found here:
          # http://zeeshanali.com/sysadmin/fixed-sysctl-cannot-stat-procsysnetbridgebridge-nf-call-iptables/
          sudo modprobe br_netfilter

          # Allowing swap may not be reliable:
          # https://github.com/kubernetes/kubernetes/issues/53533
          sudo swapoff -a

          sudo kubeadm init --config /etc/kubernetes/kubeadm_config.yaml
          for tries in $(seq 1 60); do
              sudo kubectl --kubeconfig /etc/kubernetes/kubelet.conf annotate --overwrite node $(hostname) machine=${MACHINE} && break
              sleep 1
          done

          # By default, use flannel for container network plugin, should make this configurable.
          sudo cp /dev/stdin /tmp/kube-flannel-v0.10.0.yaml <<< '
          ---
          kind: ClusterRole
          apiVersion: rbac.authorization.k8s.io/v1beta1
          metadata:
            name: flannel
          rules:
            - apiGroups:
                - ""
              resources:
                - pods
              verbs:
                - get
            - apiGroups:
                - ""
              resources:
                - nodes
              verbs:
                - list
                - watch
            - apiGroups:
                - ""
              resources:
                - nodes/status
              verbs:
                - patch
          ---
          kind: ClusterRoleBinding
          apiVersion: rbac.authorization.k8s.io/v1beta1
          metadata:
            name: flannel
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: flannel
          subjects:
          - kind: ServiceAccount
            name: flannel
            namespace: kube-system
          ---
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: flannel
            namespace: kube-system
          ---
          kind: ConfigMap
          apiVersion: v1
          metadata:
            name: kube-flannel-cfg
            namespace: kube-system
            labels:
              tier: node
              app: flannel
          data:
            cni-conf.json: |
              {
                "name": "cbr0",
                "plugins": [
                  {
                    "type": "flannel",
                    "delegate": {
                      "hairpinMode": true,
                      "isDefaultGateway": true
                    }
                  },
                  {
                    "type": "portmap",
                    "capabilities": {
                      "portMappings": true
                    }
                  }
                ]
              }
            net-conf.json: |
              {
                "Network": "10.244.0.0/16",
                "Backend": {
                  "Type": "vxlan"
                }
              }
          ---
          apiVersion: extensions/v1beta1
          kind: DaemonSet
          metadata:
            name: kube-flannel-ds
            namespace: kube-system
            labels:
              tier: node
              app: flannel
          spec:
            template:
              metadata:
                labels:
                  tier: node
                  app: flannel
              spec:
                hostNetwork: true
                nodeSelector:
                  beta.kubernetes.io/arch: amd64
                tolerations:
                - key: node-role.kubernetes.io/master
                  operator: Exists
                  effect: NoSchedule
                serviceAccountName: flannel
                initContainers:
                - name: install-cni
                  image: quay.io/coreos/flannel:v0.10.0-amd64
                  command:
                  - cp
                  args:
                  - -f
                  - /etc/kube-flannel/cni-conf.json
                  - /etc/cni/net.d/10-flannel.conflist
                  volumeMounts:
                  - name: cni
                    mountPath: /etc/cni/net.d
                  - name: flannel-cfg
                    mountPath: /etc/kube-flannel/
                containers:
                - name: kube-flannel
                  image: quay.io/coreos/flannel:v0.10.0-amd64
                  command:
                  - /opt/bin/flanneld
                  args:
                  - --ip-masq
                  - --kube-subnet-mgr
                  resources:
                    requests:
                      cpu: "100m"
                      memory: "50Mi"
                    limits:
                      cpu: "100m"
                      memory: "50Mi"
                  securityContext:
                    privileged: true
                  env:
                  - name: POD_NAME
                    valueFrom:
                      fieldRef:
                        fieldPath: metadata.name
                  - name: POD_NAMESPACE
                    valueFrom:
                      fieldRef:
                        fieldPath: metadata.namespace
                  volumeMounts:
                  - name: run
                    mountPath: /run
                  - name: flannel-cfg
                    mountPath: /etc/kube-flannel/
                volumes:
                  - name: run
                    hostPath:
                      path: /run
                  - name: cni
                    hostPath:
                      path: /etc/cni/net.d
                  - name: flannel-cfg
                    configMap:
                      name: kube-flannel-cfg
          '

          sudo kubectl --kubeconfig /etc/kubernetes/admin.conf apply -f /tmp/kube-flannel-v0.10.0.yaml
          echo done.

          ) 2>&1 | sudo tee /var/log/startup.log
