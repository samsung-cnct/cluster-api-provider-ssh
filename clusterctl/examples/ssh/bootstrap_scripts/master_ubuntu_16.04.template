          set -e
          set -x
          (
          ARCH=amd64

          # Run in noninteractive mode to avoid erroring when a config file preexists.
          export DEBIAN_FRONTEND=noninteractive

          sudo apt update && sudo apt install -y apt-transport-https curl

          curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
          sudo touch /etc/apt/sources.list.d/kubernetes.list
          sudo sh -c 'echo "deb http://apt.kubernetes.io/ kubernetes-xenial main" > /etc/apt/sources.list.d/kubernetes.list'
          sudo apt update -y
          sudo apt install -y \
              prips

          function install_configure_docker () {
              # prevent docker from auto-starting
              sudo sh -c "echo \"exit 101\" > /usr/sbin/policy-rc.d"
              sudo chmod +x /usr/sbin/policy-rc.d
              trap "sudo rm -f /usr/sbin/policy-rc.d" RETURN
              sudo apt install -y docker.io
              sudo sh -c "echo 'DOCKER_OPTS=\"--iptables=false --ip-masq=false\"' > /etc/default/docker"
              sudo systemctl daemon-reload
              sudo systemctl enable docker
              sudo systemctl start docker
          }
          install_configure_docker

          sudo sh -c "curl -sSL https://dl.k8s.io/release/${VERSION}/bin/linux/${ARCH}/kubeadm > /usr/bin/kubeadm.dl"
          sudo chmod a+rx /usr/bin/kubeadm.dl

          # kubeadm uses 10th IP as DNS server
          CLUSTER_DNS_SERVER=$(prips ${SERVICE_CIDR} | head -n 11 | tail -n 1)
          # Our Debian packages have versions like "1.8.0-00" or "1.8.0-01". Do a prefix
          # search based on our SemVer to find the right (newest) package version.
          function getversion() {
              name=$1
              prefix=$2
              version=$(sudo apt-cache madison $name | awk '{ print $3 }' | grep ^$prefix | head -n1)
              if [[ -z "$version" ]]; then
                  echo Can\'t find package $name with prefix $prefix
                  exit 1
              fi
              echo $version
          }
          KUBELET=$(getversion kubelet ${KUBELET_VERSION}-)
          KUBEADM=$(getversion kubeadm ${KUBELET_VERSION}-)
          sudo apt install -y \
              kubelet=${KUBELET} \
              kubeadm=${KUBEADM}
          sudo mv /usr/bin/kubeadm.dl /usr/bin/kubeadm
          sudo chmod a+rx /usr/bin/kubeadm

          cat << EOF | sudo tee /etc/systemd/system/kubelet.service.d/20-kubenet.conf
          [Service]
          Environment="KUBELET_DNS_ARGS=--cluster-dns=${CLUSTER_DNS_SERVER} --cluster-domain=${CLUSTER_DNS_DOMAIN}"
          EOF

          sudo systemctl daemon-reload
          sudo systemctl restart kubelet.service

          # Set up kubeadm config file to pass parameters to kubeadm init.
          # Note the latest API version for kubeadm is v1alphav2 as of kubeadm
          # 1.11. We need to account for these different versions in the next
          # rewrite of this script.
          cat << EOF | sudo tee /etc/kubernetes/kubeadm_config.yaml
          apiVersion: kubeadm.k8s.io/v1alpha1
          kind: MasterConfiguration
          api:
            bindPort: 443
          etcd:
            local:
              dataDir: /var/lib/etcd
              image: ""
          kubernetesVersion: v${CONTROL_PLANE_VERSION}
          token: ${TOKEN}
          kubeProxy:
            config:
              clusterCIDR: ${POD_CIDR}
          networking:
            dsnDomain: ${CLUSTER_DNS_DOMAIN}
            serviceSubnet: ${SERVICE_CIDR}
            podSubnet: ${POD_CIDR}
          EOF

          # Create and set bridge-nf-call-iptables to 1 to pass the kubeadm preflight check.
          # Workaround was found here:
          # http://zeeshanali.com/sysadmin/fixed-sysctl-cannot-stat-procsysnetbridgebridge-nf-call-iptables/
          sudo modprobe br_netfilter

          # [ERROR Swap]: running with swap on is not supported. Please disable swap
          # this was put in place since its something that must be done on ubuntu machines
          # when provisioning for use with kubeadm. Note, kubelet requires this to be off
          # and may be something we remove in the future and leave it as part of provisioning
          sudo swapoff -a

          sudo kubeadm init --config /etc/kubernetes/kubeadm_config.yaml
          for tries in $(seq 1 60); do
              sudo kubectl --kubeconfig /etc/kubernetes/kubelet.conf annotate --overwrite node $(hostname) machine=${MACHINE} && break
              sleep 1
          done
          # By default, use calico for container network plugin, should make this configurable.
          sudo kubectl --kubeconfig /etc/kubernetes/admin.conf apply -f https://raw.githubusercontent.com/coreos/flannel/v0.10.0/Documentation/kube-flannel.yml
          echo done.
          ) 2>&1 | sudo tee /var/log/startup.log
